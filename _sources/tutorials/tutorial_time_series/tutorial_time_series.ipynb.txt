{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial - Time series forecasting\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Time series are an ubiquitous type of data in all types of processes. Producing forecasts for them can be highly valuable in domains like retail or industrial manufacture, among many others.\n",
    "\n",
    "Lightwood supports time series forecasting (both univariate and multivariate inputs), handling many of the pain points commonly associated with setting up a manual time series predictive pipeline. \n",
    "\n",
    "In this tutorial, we will train a lightwood predictor and analyze its forecasts for the task of counting sunspots in monthly intervals.\n",
    "\n",
    "## Load data\n",
    "\n",
    "Let's begin by loading the dataset and looking at it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:53.350013Z",
     "iopub.status.busy": "2023-06-13T00:16:53.349751Z",
     "iopub.status.idle": "2023-06-13T00:16:54.095669Z",
     "shell.execute_reply": "2023-06-13T00:16:54.094630Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Sunspots</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1749-01</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1749-02</td>\n",
       "      <td>62.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1749-03</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1749-04</td>\n",
       "      <td>55.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1749-05</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2815</th>\n",
       "      <td>1983-08</td>\n",
       "      <td>71.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2816</th>\n",
       "      <td>1983-09</td>\n",
       "      <td>50.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2817</th>\n",
       "      <td>1983-10</td>\n",
       "      <td>55.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2818</th>\n",
       "      <td>1983-11</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2819</th>\n",
       "      <td>1983-12</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2820 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Month  Sunspots\n",
       "0     1749-01      58.0\n",
       "1     1749-02      62.6\n",
       "2     1749-03      70.0\n",
       "3     1749-04      55.7\n",
       "4     1749-05      85.0\n",
       "...       ...       ...\n",
       "2815  1983-08      71.8\n",
       "2816  1983-09      50.3\n",
       "2817  1983-10      55.8\n",
       "2818  1983-11      33.3\n",
       "2819  1983-12      33.4\n",
       "\n",
       "[2820 rows x 2 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"https://raw.githubusercontent.com/mindsdb/benchmarks/main/benchmarks/datasets/monthly_sunspots/data.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a very simple dataset. It's got a single column that specifies the month in which the measurement was done, and then in the 'Sunspots' column we have the actual quantity we are interested in forecasting. As such, we can characterize this as a univariate time series problem.\n",
    "\n",
    "## Define the predictive task\n",
    "\n",
    "We will use Lightwood high level methods to state what we want to predict. As this is a time series task (because we want to leverage the notion of time to predict), we need to specify a set of arguments that will activate Lightwood's time series pipeline:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:54.151803Z",
     "iopub.status.busy": "2023-06-13T00:16:54.151253Z",
     "iopub.status.idle": "2023-06-13T00:16:58.441101Z",
     "shell.execute_reply": "2023-06-13T00:16:58.439941Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:lightwood-2626:No torchvision detected, image helpers not supported.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:No torchvision/pillow detected, image encoder not supported\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from lightwood.api.high_level import ProblemDefinition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:58.446137Z",
     "iopub.status.busy": "2023-06-13T00:16:58.445499Z",
     "iopub.status.idle": "2023-06-13T00:16:58.458303Z",
     "shell.execute_reply": "2023-06-13T00:16:58.457010Z"
    }
   },
   "outputs": [],
   "source": [
    "tss = {'horizon': 6,   # the predictor will learn to forecast what the next semester counts will look like (6 data points at monthly intervals -> 6 months)\n",
    "       'order_by': 'Month', # what column is used to order the entire datset\n",
    "       'window': 12           # how many past values to consider for emitting predictions\n",
    "      }\n",
    "\n",
    "pdef = ProblemDefinition.from_dict({'target': 'Sunspots',         # specify the column to forecast\n",
    "                                    'timeseries_settings': tss    # pass along all time series specific parameters\n",
    "                                   })"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's do a very simple train-test split, leaving 10% of the data to check the forecasts that our predictor will produce:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:58.462513Z",
     "iopub.status.busy": "2023-06-13T00:16:58.462231Z",
     "iopub.status.idle": "2023-06-13T00:16:58.470232Z",
     "shell.execute_reply": "2023-06-13T00:16:58.469246Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2538, 2) (282, 2)\n"
     ]
    }
   ],
   "source": [
    "cutoff = int(len(df)*0.9)\n",
    "\n",
    "train = df[:cutoff]\n",
    "test = df[cutoff:]\n",
    "\n",
    "print(train.shape, test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate the predictor object\n",
    "\n",
    "Now, we can generate code for a machine learning model by using our problem definition and the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:58.473996Z",
     "iopub.status.busy": "2023-06-13T00:16:58.473721Z",
     "iopub.status.idle": "2023-06-13T00:16:59.788139Z",
     "shell.execute_reply": "2023-06-13T00:16:59.786999Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:type_infer-2626:Analyzing a sample of 2467\u001b[0m\n",
      "\u001b[32mINFO:type_infer-2626:from a total population of 2820, this is equivalent to 87.5% of your data.\u001b[0m\n",
      "\u001b[32mINFO:type_infer-2626:Infering type for: Month\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/numpy/core/fromnumeric.py:3474: RuntimeWarning: Mean of empty slice.\n",
      "  return _methods._mean(a, axis=axis, dtype=dtype,\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/numpy/core/_methods.py:189: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n",
      "\u001b[32mINFO:type_infer-2626:Column Month has data type date\u001b[0m\n",
      "\u001b[32mINFO:type_infer-2626:Infering type for: Sunspots\u001b[0m\n",
      "\u001b[32mINFO:type_infer-2626:Column Sunspots has data type float\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Finished statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Unable to import black formatter, predictor code might be a bit ugly.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "from lightwood.api.high_level import (\n",
    "    json_ai_from_problem,\n",
    "    code_from_json_ai,\n",
    "    predictor_from_code\n",
    ")\n",
    "\n",
    "json_ai = json_ai_from_problem(df, problem_definition=pdef)\n",
    "code = code_from_json_ai(json_ai)\n",
    "predictor = predictor_from_code(code)\n",
    "\n",
    "# uncomment this to see the generated code:\n",
    "# print(code)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train\n",
    "\n",
    "Okay, everything is ready now for our predictor to learn based on the training data we will provide.\n",
    "\n",
    "Internally, lightwood cleans and reshapes the data, featurizes measurements and timestamps, and comes up with a handful of different models that will be evaluated to keep the one that produces the best forecasts.\n",
    "\n",
    "Let's train the predictor. This should take a couple of minutes, at most:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:16:59.792540Z",
     "iopub.status.busy": "2023-06-13T00:16:59.792214Z",
     "iopub.status.idle": "2023-06-13T00:17:28.923855Z",
     "shell.execute_reply": "2023-06-13T00:17:28.922814Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 1/8] - Statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Starting statistical analysis\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Finished statistical analysis\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `analyze_data` runtime: 0.33 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 2/8] - Data preprocessing\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Transforming timeseries data\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Using 1 processes to reshape.\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `preprocess` runtime: 1.45 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 3/8] - Data splitting\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Splitting the data into train/test\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `split` runtime: 0.0 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 4/8] - Preparing encoders\u001b[0m\n",
      "\u001b[37mDEBUG:dataprep_ml-2626:Preparing sequentially...\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `prepare` runtime: 1.66 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 5/8] - Feature generation\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Featurizing the data\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `featurize` runtime: 1.71 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 6/8] - Mixer training\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Training the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:120: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/pytorch_ranger/ranger.py:172: UserWarning: This overload of addcmul_ is deprecated:\n",
      "\taddcmul_(Number value, Tensor tensor1, Tensor tensor2)\n",
      "Consider using one of the following signatures instead:\n",
      "\taddcmul_(Tensor tensor1, Tensor tensor2, *, Number value) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)\n",
      "  exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 9.051179438829422 with learning rate 0.0001\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 9.014868944883347 with learning rate 0.0005\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 8.969507426023483 with learning rate 0.001\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 8.87904903292656 with learning rate 0.002\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 8.78894716501236 with learning rate 0.003\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 8.611961007118225 with learning rate 0.005\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 8.19576981663704 with learning rate 0.01\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss of 6.255890354514122 with learning rate 0.05\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Found learning rate of: 0.05\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 1: 0.5818638950586319\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 2: 0.4797070026397705\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 3: 0.48343823850154877\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 4: 0.49563319981098175\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 5: 0.3949013650417328\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 6: 0.3958611488342285\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 7: 0.3623562604188919\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 8: 0.38093577325344086\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 9: 0.5217197835445404\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 10: 0.6411243230104446\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 1: 0.29842292449691077\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 2: 0.30301081321456214\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `fit_mixer` runtime: 0.98 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoSKTime forecaster for array prediction\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Starting trial with hyperparameters: {'class': 'croston.Croston'}\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Trial got error: 0.19796658477664864\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Starting trial with hyperparameters: {'class': 'trend.STLForecaster'}\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Trial got error: 0.5245438066022906\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Starting trial with hyperparameters: {'class': 'trend.PolynomialTrendForecaster'}\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Trial got error: 0.683102101870188\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Starting trial with hyperparameters: {'class': 'theta.ThetaForecaster'}\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626:Multiplicative seasonality is not appropriate for zero and negative values\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Trial got error: inf\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Selected best model: croston.Croston\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `fit_mixer` runtime: 0.28 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoETS forecaster for array prediction\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `fit_mixer` runtime: 0.05 seconds\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoARIMA forecaster for array prediction\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/scipy/optimize/_numdiff.py:576: RuntimeWarning: invalid value encountered in subtract\n",
      "  df = fun(x) - f0\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "\u001b[37mDEBUG:lightwood-2626: `fit_mixer` runtime: 18.72 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Ensembling the mixer\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Mixer: NeuralTs got accuracy: 0.875\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Mixer: SkTime got accuracy: 0.956\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Mixer: ETSMixer got accuracy: 0.934\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Mixer: ARIMAMixer got accuracy: 0.951\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Picked best mixer: SkTime\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `fit` runtime: 21.65 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 7/8] - Ensemble analysis\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Analyzing the ensemble of mixers\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block ICP is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block ConfStats is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block AccStats is now running its analyze() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block PermutationFeatureImportance is now running its analyze() method\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:Block 'PermutationFeatureImportance' does not support time series nor text encoding, skipping...\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `analyze_ensemble` runtime: 0.18 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Learn phase 8/8] - Adjustment on validation requested\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Updating the mixers\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py:120: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\n",
      "  warnings.warn(\"torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.\")\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 1: 0.2963088055451711\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Loss @ epoch 2: 0.2954939355452855\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoSKTime forecaster for array prediction\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Selected best model: croston.Croston\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoETS forecaster for array prediction\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:Started fitting AutoARIMA forecaster for array prediction\u001b[0m\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/statsforecast/arima.py:884: UserWarning: possible convergence problem: minimize gave code 2]\n",
      "  warnings.warn(\n",
      "\u001b[37mDEBUG:lightwood-2626: `adjust` runtime: 2.13 seconds\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `learn` runtime: 29.13 seconds\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "predictor.learn(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predict\n",
    "\n",
    "Once the predictor has trained, we can use it to generate 6-month forecasts for each of the test set data points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:17:28.929544Z",
     "iopub.status.busy": "2023-06-13T00:17:28.929160Z",
     "iopub.status.idle": "2023-06-13T00:17:29.682919Z",
     "shell.execute_reply": "2023-06-13T00:17:29.681878Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mINFO:dataprep_ml-2626:[Predict phase 1/4] - Data preprocessing\u001b[0m\n",
      "/tmp/3a9bf02dd35c4fb5ee0a535f70c72cedbcf6b407ea5ae01e1686615419776693.py:584: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[col] = [None] * len(data)\n",
      "\u001b[32mINFO:dataprep_ml-2626:Cleaning the data\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Transforming timeseries data\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `preprocess` runtime: 0.15 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Predict phase 2/4] - Feature generation\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:Featurizing the data\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `featurize` runtime: 0.2 seconds\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Predict phase 3/4] - Calling ensemble\u001b[0m\n",
      "\u001b[33mWARNING:lightwood-2626:This mixer does not output probability estimates\u001b[0m\n",
      "\u001b[32mINFO:dataprep_ml-2626:[Predict phase 4/4] - Analyzing output\u001b[0m\n",
      "/home/runner/work/lightwood/lightwood/lightwood/helpers/ts.py:122: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df[f'order_{col}'].iloc[idx] = timestamps\n",
      "\u001b[32mINFO:lightwood-2626:The block ICP is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block ConfStats is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:ConfStats.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block AccStats is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:AccStats.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:The block PermutationFeatureImportance is now running its explain() method\u001b[0m\n",
      "\u001b[32mINFO:lightwood-2626:PermutationFeatureImportance.explain() has not been implemented, no modifications will be done to the data insights.\u001b[0m\n",
      "\u001b[37mDEBUG:lightwood-2626: `predict` runtime: 0.75 seconds\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "forecasts = predictor.predict(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check how a single row might look:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:17:29.686946Z",
     "iopub.status.busy": "2023-06-13T00:17:29.686420Z",
     "iopub.status.idle": "2023-06-13T00:17:29.707453Z",
     "shell.execute_reply": "2023-06-13T00:17:29.706478Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>original_index</th>\n",
       "      <th>prediction</th>\n",
       "      <th>order_Month</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lower</th>\n",
       "      <th>upper</th>\n",
       "      <th>anomaly</th>\n",
       "      <th>prediction_sum</th>\n",
       "      <th>lower_sum</th>\n",
       "      <th>upper_sum</th>\n",
       "      <th>confidence_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>[139.64101541907135, 139.64101541907135, 139.6...</td>\n",
       "      <td>[-272592000.0, -269913600.0, -267235200.0, -26...</td>\n",
       "      <td>[0.9991, 0.9991, 0.9991, 0.9991, 0.9991, 0.9991]</td>\n",
       "      <td>[5.321601105480312, 0.0, 0.0, 0.0, 0.0, 0.0]</td>\n",
       "      <td>[273.9604297326624, 295.2716011054803, 307.871...</td>\n",
       "      <td>False</td>\n",
       "      <td>837.846093</td>\n",
       "      <td>0.0</td>\n",
       "      <td>372.221601</td>\n",
       "      <td>0.9991</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    original_index                                         prediction  \\\n",
       "10              10  [139.64101541907135, 139.64101541907135, 139.6...   \n",
       "\n",
       "                                          order_Month  \\\n",
       "10  [-272592000.0, -269913600.0, -267235200.0, -26...   \n",
       "\n",
       "                                          confidence  \\\n",
       "10  [0.9991, 0.9991, 0.9991, 0.9991, 0.9991, 0.9991]   \n",
       "\n",
       "                                           lower  \\\n",
       "10  [5.321601105480312, 0.0, 0.0, 0.0, 0.0, 0.0]   \n",
       "\n",
       "                                                upper  anomaly  \\\n",
       "10  [273.9604297326624, 295.2716011054803, 307.871...    False   \n",
       "\n",
       "    prediction_sum  lower_sum   upper_sum  confidence_mean  \n",
       "10      837.846093        0.0  372.221601           0.9991  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecasts.iloc[[10]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You'll note that the point `prediction` has associated `lower` and `upper` bounds that are a function of the estimated `confidence` the model has on its own output. Apart from this, `order_Month` yields the timestamps of each prediction, the `anomaly` tag will let you know if the observed value falls outside of the predicted region. \n",
    "\n",
    "\n",
    "## Visualizing a forecast\n",
    "\n",
    "Okay, time series are much easier to appreciate through plots. Let's make one:\n",
    "\n",
    "NOTE: We will use `matplotlib` to generate a simple plot of these forecasts. If you want to run this notebook locally, you will need to `pip install matplotlib` for the following code to work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:17:29.711553Z",
     "iopub.status.busy": "2023-06-13T00:17:29.711275Z",
     "iopub.status.idle": "2023-06-13T00:17:29.715706Z",
     "shell.execute_reply": "2023-06-13T00:17:29.714661Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-06-13T00:17:29.720345Z",
     "iopub.status.busy": "2023-06-13T00:17:29.719826Z",
     "iopub.status.idle": "2023-06-13T00:17:30.045934Z",
     "shell.execute_reply": "2023-06-13T00:17:30.044865Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 8))\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['prediction'], color='purple', label='point prediction')\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['lower'], color='grey')\n",
    "plt.plot([None for _ in range(forecasts.shape[0])] + forecasts.iloc[-1]['upper'], color='grey')\n",
    "plt.xlabel('timestep')\n",
    "plt.ylabel('# sunspots')\n",
    "plt.title(\"Forecasted amount of sunspots for the next semester\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "In this tutorial, we have gone through how you can train a machine learning model with Lightwood to produce forecasts for a univariate time series task.\n",
    "\n",
    "There are additional parameters to further customize your timeseries settings and/or prediction insights, so be sure to check the rest of the documentation."
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
